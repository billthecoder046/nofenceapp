

class Comment {
  String? id; // Unique ID for the comment (can be auto-generated by Firestore)
  String? userId; // ID of the user who made the comment
  String? commentText; // The actual comment text
  DateTime? timestamp; // Timestamp when the comment was made
  String? userName; // Optional: User's name for display
  String? userProfileImageUrl; // Optional: User's profile picture URL

  Comment({
    this.id,
    this.userId,
    this.commentText,
    this.timestamp,
    this.userName,
    this.userProfileImageUrl,
  });

  // Function to convert Comment object to JSON
  Map<String, dynamic> toJSON() {
    return {
      'id': id, // Store ID if provided
      'userId': userId,
      'commentText': commentText,
      'timestamp': timestamp?.millisecondsSinceEpoch,
      'userName': userName, // Store optional fields
      'userProfileImageUrl': userProfileImageUrl,
    };
  }

  // Function to create a Comment object from JSON
  factory Comment.fromJSON(Map<String, dynamic> json) {
    return Comment(
      id: json['id'], // Retrieve ID from JSON
      userId: json['userId'],
      commentText: json['commentText'],
      timestamp: DateTime.fromMillisecondsSinceEpoch(json['timestamp']),
      userName: json['userName'],
      userProfileImageUrl: json['userProfileImageUrl'],
    );
  }

  // Helper function to get formatted date string
  String get formattedDate {
    return DateTime.fromMillisecondsSinceEpoch(timestamp! as int).toString();
  }
}